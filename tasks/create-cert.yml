---
- name: "Extract first domain from domain list"
  ansible.builtin.set_fact:
    first_domain: "{{ cert_item.domains | first | replace('*.', '') }}"

- name: "Check if certificate already exists."
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ first_domain }}/cert.pem
  register: letsencrypt_cert

- name: "Ensure domain-specific renewal hook folder exists."
  ansible.builtin.file:
    path: /etc/letsencrypt/domain-renewal-hooks/{{ first_domain }}
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: cert_item.services is defined and cert_item.services
        or cert_item.pre_hook_additional_content is defined and cert_item.pre_hook_additional_content | length > 0
        or cert_item.post_hook_additional_content is defined and cert_item.post_hook_additional_content | length > 0
        or cert_item.deploy_hook_additional_content is defined and cert_item.deploy_hook_additional_content | length > 0

- name: "Set domain services fact"
  ansible.builtin.set_fact:
    certbot_netcup_domain_services: "{{ cert_item.services }}"
  when:
    - cert_item.services is defined
    - cert_item.services

- name: "Set domain pre hook additional content fact"
  ansible.builtin.set_fact:
    certbot_netcup_domain_pre_hook_additional_content: "{{ cert_item.pre_hook_additional_content }}"
  when:
    - cert_item.pre_hook_additional_content is defined
    - cert_item.pre_hook_additional_content | length > 0

- name: "Set domain post hook additional content fact"
  ansible.builtin.set_fact:
    certbot_netcup_domain_post_hook_additional_content: "{{ cert_item.post_hook_additional_content }}"
  when:
    - cert_item.post_hook_additional_content is defined
    - cert_item.post_hook_additional_content | length > 0

- name: "Set domain deploy hook additional content fact"
  ansible.builtin.set_fact:
    certbot_netcup_domain_deploy_hook_additional_content: "{{ cert_item.deploy_hook_additional_content }}"
  when:
    - cert_item.deploy_hook_additional_content is defined
    - cert_item.deploy_hook_additional_content | length > 0

- name: "Create pre hook script."
  ansible.builtin.template:
    src: pre_hook.sh.j2
    dest: /etc/letsencrypt/domain-renewal-hooks/{{ first_domain }}/pre_hook.sh
    owner: root
    group: root
    mode: "0750"
  when: certbot_netcup_domain_services is defined and certbot_netcup_domain_services
        or certbot_netcup_domain_pre_hook_additional_content is defined and certbot_netcup_domain_pre_hook_additional_content | length > 0

- name: "Create post hook script."
  ansible.builtin.template:
    src: post_hook.sh.j2
    dest: /etc/letsencrypt/domain-renewal-hooks/{{ first_domain }}/post_hook.sh
    owner: root
    group: root
    mode: "0750"
  when: certbot_netcup_domain_services is defined and certbot_netcup_domain_services
      or certbot_netcup_domain_post_hook_additional_content is defined and certbot_netcup_domain_post_hook_additional_content | length > 0

- name: "Create deploy hook script."
  ansible.builtin.template:
    src: post_hook.sh.j2
    dest: /etc/letsencrypt/domain-renewal-hooks/{{ first_domain }}/deploy_hook.sh
    owner: root
    group: root
    mode: "0750"
  when: certbot_netcup_domain_services is defined and certbot_netcup_domain_services
      or certbot_netcup_domain_deploy_hook_additional_content is defined and certbot_netcup_domain_deploy_hook_additional_content | length > 0

- name: 'Log certbot command'
  ansible.builtin.debug:
    msg: '{{ certbot_create_command }}'
  when: not letsencrypt_cert.stat.exists

- name: "Generate new certificate if one doesn't exist."
  ansible.builtin.command: "{{ certbot_create_command }}"
  when: not letsencrypt_cert.stat.exists
  changed_when: false
